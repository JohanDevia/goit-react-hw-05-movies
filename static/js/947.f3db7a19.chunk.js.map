{"version":3,"file":"static/js/947.f3db7a19.chunk.js","mappings":"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","sources":["components/MovieDetails/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","components/MovieDetails/Reviews/Reviews.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = ({ movieId: propMovieId }) => {\n  const { movieId: routeMovieId } = useParams(); // Obtener el parámetro de ruta movieId\n  const movieId = propMovieId || routeMovieId;\n\n  // Estado local para almacenar el reparto de la película\n  const [cast, setCast] = useState([]);\n\n  // Función para obtener el reparto de la película\n  const fetchCast = useCallback(async () => {\n    try {\n      const apiKey = 'f363c7f847ff3862e66e9336f55534d2';\n      const castUrl = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`;\n\n      const response = await axios.get(castUrl);\n      setCast(response.data.cast);\n    } catch (error) {\n      console.error('Error fetching cast:', error);\n    }\n  }, [movieId]); // Añade movieId a las dependencias de useCallback\n\n  useEffect(() => {\n    fetchCast();\n  }, [fetchCast]); // Se ejecuta una vez al montar el componente y cada vez que fetchCast cambia\n\n  return (\n    <ul>\n      {cast.map(actor => (\n        <li key={actor.id}>\n          {actor.name} as {actor.character}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useParams, Link } from 'react-router-dom';\nimport Cast from './Cast/Cast';\nimport Reviews from './Reviews/Reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams(); // Obtener el parámetro de ruta movieId\n\n  // Estado local para almacenar los detalles de la película\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n\n  // Función para obtener los detalles de la película\n  const fetchMovieDetails = useCallback(async () => {\n    try {\n      const apiKey = 'f363c7f847ff3862e66e9336f55534d2';\n      const movieDetailsUrl = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`;\n\n      const response = await axios.get(movieDetailsUrl);\n      setMovieDetails(response.data);\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n    }\n  }, [movieId]); // Añade movieId a las dependencias de useCallback\n\n  useEffect(() => {\n    fetchMovieDetails();\n  }, [fetchMovieDetails]); // Se ejecuta una vez al montar el componente y cada vez que fetchMovieDetails cambia\n\n  if (!movieDetails) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>{movieDetails.title}</h1>\n      <img\n        src={`https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`}\n        alt={movieDetails.title}\n      />\n      <p>{movieDetails.overview}</p>\n\n      <h2>\n        <Link to=\"#\" onClick={() => setShowCast(!showCast)}>\n          Cast\n        </Link>\n      </h2>\n      {showCast && <Cast movieId={movieId} />}\n\n      <h2>\n        <Link to=\"#\" onClick={() => setShowReviews(!showReviews)}>\n          Reviews\n        </Link>\n      </h2>\n      {showReviews && <Reviews movieId={movieId} />}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = ({ movieId: propMovieId }) => {\n  const { movieId: routeMovieId } = useParams(); // Obtener el parámetro de ruta movieId\n  const movieId = propMovieId || routeMovieId;\n\n  // Estado local para almacenar las críticas de la película\n  const [reviews, setReviews] = useState([]);\n\n  // Función para obtener las críticas de la película\n  const fetchReviews = useCallback(async () => {\n    try {\n      const apiKey = 'f363c7f847ff3862e66e9336f55534d2';\n      const reviewsUrl = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`;\n\n      const response = await axios.get(reviewsUrl);\n      setReviews(response.data.results);\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n    }\n  }, [movieId]); // Añade movieId a las dependencias de useCallback\n\n  useEffect(() => {\n    fetchReviews();\n  }, [fetchReviews]); // Se ejecuta una vez al montar el componente y cada vez que fetchReviews cambia\n\n  return (\n    <ul>\n      {reviews.map(review => (\n        <li key={review.id}>\n          <p>{review.content}</p>\n          <p>By: {review.author}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n"],"names":["_ref","movieId","propMovieId","routeMovieId","useParams","cast","setCast","useState","fetchCast","useCallback","async","apiKey","castUrl","concat","response","axios","data","error","console","useEffect","_jsx","children","map","actor","_jsxs","name","character","id","MovieDetails","movieDetails","setMovieDetails","showCast","setShowCast","showReviews","setShowReviews","fetchMovieDetails","movieDetailsUrl","title","src","poster_path","alt","overview","Link","to","onClick","Cast","Reviews","reviews","setReviews","fetchReviews","reviewsUrl","results","review","content","author"],"sourceRoot":""}